// Code generated by protoc-gen-go.
// source: db_service.proto
// DO NOT EDIT!

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	db_service.proto

It has these top-level messages:
	DataRequest
	DataResponse
*/
package rpc

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

// The request message
type DataRequest struct {
	Query  string   `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
	Skip   int32    `protobuf:"varint,2,opt,name=skip" json:"skip,omitempty"`
	Limit  int32    `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	Sort   []string `protobuf:"bytes,4,rep,name=sort" json:"sort,omitempty"`
	Select []string `protobuf:"bytes,5,rep,name=select" json:"select,omitempty"`
	Data   string   `protobuf:"bytes,6,opt,name=data" json:"data,omitempty"`
	DataId string   `protobuf:"bytes,7,opt,name=data_id" json:"data_id,omitempty"`
}

func (m *DataRequest) Reset()         { *m = DataRequest{} }
func (m *DataRequest) String() string { return proto.CompactTextString(m) }
func (*DataRequest) ProtoMessage()    {}

// The response message
type DataResponse struct {
	Code    string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *DataResponse) Reset()         { *m = DataResponse{} }
func (m *DataResponse) String() string { return proto.CompactTextString(m) }
func (*DataResponse) ProtoMessage()    {}

// Client API for Db service

type DbClient interface {
	// count
	Count(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error)
	// find data
	Find(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error)
	FindOne(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error)
	FindId(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error)
	FindLink(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error)
	// edit data
	Save(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error)
	Insert(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error)
	Update(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error)
	Delete(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error)
	// analyze
	Aggregate(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error)
	ExecJs(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error)
}

type dbClient struct {
	cc *grpc.ClientConn
}

func NewDbClient(cc *grpc.ClientConn) DbClient {
	return &dbClient{cc}
}

func (c *dbClient) Count(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error) {
	out := new(DataResponse)
	err := grpc.Invoke(ctx, "/rpc.Db/Count", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbClient) Find(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error) {
	out := new(DataResponse)
	err := grpc.Invoke(ctx, "/rpc.Db/Find", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbClient) FindOne(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error) {
	out := new(DataResponse)
	err := grpc.Invoke(ctx, "/rpc.Db/FindOne", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbClient) FindId(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error) {
	out := new(DataResponse)
	err := grpc.Invoke(ctx, "/rpc.Db/FindId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbClient) FindLink(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error) {
	out := new(DataResponse)
	err := grpc.Invoke(ctx, "/rpc.Db/FindLink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbClient) Save(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error) {
	out := new(DataResponse)
	err := grpc.Invoke(ctx, "/rpc.Db/Save", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbClient) Insert(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error) {
	out := new(DataResponse)
	err := grpc.Invoke(ctx, "/rpc.Db/Insert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbClient) Update(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error) {
	out := new(DataResponse)
	err := grpc.Invoke(ctx, "/rpc.Db/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbClient) Delete(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error) {
	out := new(DataResponse)
	err := grpc.Invoke(ctx, "/rpc.Db/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbClient) Aggregate(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error) {
	out := new(DataResponse)
	err := grpc.Invoke(ctx, "/rpc.Db/Aggregate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbClient) ExecJs(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error) {
	out := new(DataResponse)
	err := grpc.Invoke(ctx, "/rpc.Db/ExecJs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Db service

type DbServer interface {
	// count
	Count(context.Context, *DataRequest) (*DataResponse, error)
	// find data
	Find(context.Context, *DataRequest) (*DataResponse, error)
	FindOne(context.Context, *DataRequest) (*DataResponse, error)
	FindId(context.Context, *DataRequest) (*DataResponse, error)
	FindLink(context.Context, *DataRequest) (*DataResponse, error)
	// edit data
	Save(context.Context, *DataRequest) (*DataResponse, error)
	Insert(context.Context, *DataRequest) (*DataResponse, error)
	Update(context.Context, *DataRequest) (*DataResponse, error)
	Delete(context.Context, *DataRequest) (*DataResponse, error)
	// analyze
	Aggregate(context.Context, *DataRequest) (*DataResponse, error)
	ExecJs(context.Context, *DataRequest) (*DataResponse, error)
}

func RegisterDbServer(s *grpc.Server, srv DbServer) {
	s.RegisterService(&_Db_serviceDesc, srv)
}

func _Db_Count_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(DataRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(DbServer).Count(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Db_Find_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(DataRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(DbServer).Find(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Db_FindOne_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(DataRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(DbServer).FindOne(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Db_FindId_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(DataRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(DbServer).FindId(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Db_FindLink_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(DataRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(DbServer).FindLink(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Db_Save_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(DataRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(DbServer).Save(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Db_Insert_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(DataRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(DbServer).Insert(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Db_Update_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(DataRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(DbServer).Update(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Db_Delete_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(DataRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(DbServer).Delete(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Db_Aggregate_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(DataRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(DbServer).Aggregate(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Db_ExecJs_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(DataRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(DbServer).ExecJs(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Db_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Db",
	HandlerType: (*DbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Count",
			Handler:    _Db_Count_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _Db_Find_Handler,
		},
		{
			MethodName: "FindOne",
			Handler:    _Db_FindOne_Handler,
		},
		{
			MethodName: "FindId",
			Handler:    _Db_FindId_Handler,
		},
		{
			MethodName: "FindLink",
			Handler:    _Db_FindLink_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _Db_Save_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _Db_Insert_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Db_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Db_Delete_Handler,
		},
		{
			MethodName: "Aggregate",
			Handler:    _Db_Aggregate_Handler,
		},
		{
			MethodName: "ExecJs",
			Handler:    _Db_ExecJs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
